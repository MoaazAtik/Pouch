package com.thewhitewings.pouch.data;

import androidx.lifecycle.LiveData;

import com.thewhitewings.pouch.utils.Zone;

import java.util.List;

/**
 * Interface for the Notes Repository
 */
public interface NotesRepository {

    /**
     * Get notes live data that was fetched from the database.
     * <p>
     * It holds the state of the notes list that is displayed in the UI.
     * </p>
     * <p>
     * <strong>Note:</strong> It doesn't necessarily reflect all of the notes in the database.
     * Instead, it reflects the notes that are fetched from the database
     * based on certain criteria such as search query or sort option,
     * and are currently displayed in the UI.
     * </p>
     *
     * @return LiveData of a list of notes
     */
    LiveData<List<Note>> getAllNotes();

    /**
     * Create a new note in the database
     * <p>
     * Note: the ID and timestamp of the note will be generated by the database
     * </p>
     *
     * @param noteTitle Title of the note
     * @param noteBody  Body of the note
     */
    void createNote(String noteTitle, String noteBody);

    /**
     * Update the note in Database that has the same id as the given note.
     *
     * @param newNoteTitle New title of the note
     * @param newNoteBody  New body of the note
     * @param noteId       Id of the note that is being updated
     */
    void updateNote(String newNoteTitle, String newNoteBody, int noteId);

    /**
     * Delete the note from Database that has the same id as the given note.
     *
     * @param note Note to be deleted
     */
    void deleteNote(Note note);

    /**
     * Search Notes by Note title and/or body
     *
     * @param searchQuery Note title and/or body
     * @param sortOption  to be used for sorting the results
     */
    void searchNotes(String searchQuery, SortOption sortOption);

    /**
     * Sort filtered Notes by Note title and/or body
     *
     * @param sortOption  to be used for sorting the results
     * @param searchQuery Note title and/or body
     */
    void sortNotes(SortOption sortOption, String searchQuery);

    /**
     * Toggle between Zones {@link Zone#CREATIVE} and {@link Zone#BOX_OF_MYSTERIES}
     *
     * @param newZone New Zone to be set
     */
    void toggleZone(Zone newZone);

    /**
     * Save the Sort Option preference in SharedPreferences for the provided zone
     *
     * @param sortOption preference to be saved
     * @param zone       current zone
     */
    void saveSortOption(SortOption sortOption, Zone zone);

    /**
     * Get the Sort Option preference from SharedPreferences for the provided zone
     *
     * @param zone current zone
     * @return stored Sort Option preference
     */
    SortOption getSortOption(Zone zone);
}
